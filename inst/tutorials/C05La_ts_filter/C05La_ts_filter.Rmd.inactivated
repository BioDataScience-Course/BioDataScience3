---
title: "Filtrage de séries spatio-temporelles"
author: "Guyliann Engels & Philippe Grosjean"
description: "**SDD III Module 5** Filtrage de séries spatio-termporelles."
tutorial:
  id: "C05La_ts_filter"
version: 2.0.0/6
output:
  learnr::tutorial:
  progressive: true
allow_skip: true
runtime: shiny_prerendered
---

```{r setup, include=FALSE}
BioDataScience3::learnr_setup()
SciViews::R("ts", lang = "fr")
# dataset
hr <- read(system.file("extdata", "heart_rate.rds",
  package = "BioDataScience3"))

hr_ts <- ts(hr$heart_rate, frequency = 60)
hr_decomp <- tsd(hr_ts, method = "median", order = 30, times = 20)
hr_filtered <- extract(hr_decomp, components = "filtered")
```

```{r, echo=FALSE}
BioDataScience3::learnr_banner()
```

```{r, context="server"}
BioDataScience3::learnr_server(input, output, session)
```

------------------------------------------------------------------------

## Objectifs

Le filtrage d'une série spatio-temporelle est un outil important pour son analyse. Vous avez déjà vu que l'on ne peut pas étudier les cycles d'une série si une tendance générale est présente. Il faut dans ce cas filtrer la série pour en éliminer la tendance générale et obtenir une série stationnarisée. Nous aborderons dans ce tutoriel un autre exemple pratique de filtrage d'une série.

## Variation de la fréquence cardiaque

Un sportif travaille avec un médecin du sport afin d'optimiser ses performances. Le médecin n'est pas un expert dans le traitement des données collectées. Le sportif a couru sous les 36 minutes lors d'un effort maximal dans une course de 10km, ce qui est une performance correcte pour un sportif amateur. En collaboration avec son médecin et vous, il souhaite comprendre les informations collectées concernant la fréquence cardiaque dont voici les résultats :

```{r}
chart(data = hr, heart_rate ~ time/60) +
  geom_line() +
  labs(y = "Fréquence cardiaque [bpm]", x = "Temps [min]")
```

Vous noterez tout de suite que le signal est tronqué à 184bmp. Il s'agit probablement d'un défaut du capteur utilisé. Le signal reste cependant exploitable à condition de tenir compte de ce problème. En particulier, nous devons nous méfier des moyennes qui seront erronées vers la fin de la course. Par contre, les médianes étant peu sensibles à la valeur des extrêmes, et la fréquence cardiaque médiane se situant probablement en dessous des 184bmp tout au long de la course, nous pouvons utiliser ici la médiane comme mesure de tendance centrale.

À première vue, le médecin avance les observations suivantes. Il note une montée rapide de la fréquence cardiaque puis un plateau, suivi d'une montée progressive de la fréquence cardiaque et d'un nouveau plateau. Cependant, le médecin aurait besoin d'un signal "lissé" afin d'étudier l'évolution de la fréquence cardiaque au cours du temps plus facilement. C'est à présent à vous de jouer !

## Création de l'objet ts

Les observations sont réalisées sur la même personne au cours du temps, nous sommes face à une série temporelle. Appliquez l'ensemble de vos connaissances. La fréquence cardiaque est mesurée toutes les secondes.

```{r, echo=TRUE}
head(hr[,c("time", "heart_rate")])
```

Créez un objet **ts** dont l'unité de temps est la minute et nommez-le `hr_ts`. Réalisez ensuite un graphique de `hr_ts`. Enfin, étudiez l'autocorrélation. Le tableau de données initial est `hr`.

```{r ts_h2, exercise=TRUE}
___ <- ts(___$___, frequency = ___)
# graphique
___(___)
# autocorrélation
___(___)
```

```{r ts_h2-hint-1}
hr_ts <- ts(hr$___, frequency = ___)
# graphique
___(hr_ts)
# autocorrélation
___(hr_ts)

## Attention, le prochain indice est la solution ##
```

```{r ts_h2-solution}
## Solution ##
hr_ts <- ts(hr$heart_rate, frequency = 60)
plot(hr_ts)
# autocorrélation
acf(hr_ts)
```

```{r ts_h2-check}
grade_code("On compte 60 secondes par minute. Il semble donc cohérent d'avoir une fréquence de 60. L'étude de l'autocorrélation de la série indique qu'elle est forte pour tous les décalages. Ceci indique généralement la dominance d'une tendance générale.")
```

## Décomposition de la série

Filtrez cette série à l'aide des médianes mobiles avec fenêtre de 61 observations et reproduisez le lissage 20 fois dans le but de dégager différentes phases successives tout au long de la série. Nommez cet objet `hr_decomp`.

```{r, decmed_h2, exercise=TRUE}
___ <- tsd(___, method = "___", order = ___, times = ___)
plot(___)
```

```{r, decmed_h2-hint-1}
hr_decomp <- tsd(hr_ts, method = "___", order = 30, times = ___)
plot(hr_decomp)

## Attention, le prochain indice est la solution ##
```

```{r, decmed_h2-solution}
## Solution ##
hr_decomp <- tsd(hr_ts, method = "median", order = 30, times = 20)
plot(hr_decomp)
```

```{r, decmed_h2-check}
grade_code("Vous avez réussi à filtrer la tendance de la série et placer le reste dans les résidus. L'utilisation des médianes mobiles est une bonne approche ici, car d'une part elle met en évidence les plateaux successifs, et d'autre part elle nous permet d'éviter en grande partie les erreurs de calcul liées au signal tronqué au dessus de 184bpm.")
```

Extrayez la composante filtrée en utilisant `extract()` sur l'objet `hr_decomp` puis réalisez un graphique de cette nouvelle série.

```{r extract_h2, exercise=TRUE}
hr_filtered <- extract(___, ___ = ___)
plot(hr_filtered)
```

```{r extract_h2-hint-1}
hr_filtered <- extract(___, components = ___)
plot(hr_filtered)

## Attention, le prochain indice est la solution ##
```

```{r extract_h2-solution}
## Solution ##
hr_filtered <- extract(hr_decomp, components = "filtered")
plot(hr_filtered)
```

```{r extract_h2-check}
grade_code("Vous avez correctement extrait la composante cible de votre objet **tsd** pour en faire un objet **ts**.")
```

## Analyse de la série filtrée

Faites à présent un test de tendance par bootstrap sur votre objet `hr_filtered`. Réalisez 199 ré-échantillonnages. Affichez les graphiques associés à ce test.

```{r trend_h2, exercise = TRUE}
___(trend.test(___, R = ___))
```

```{r trend_h2-hint-1}
plot(trend.test(___, R = ___))

## Attention, le prochain indice est la solution ##
```

```{r trend_h2-solution}
## Solution ##
plot(trend.test(hr_filtered, R = 199))
```

```{r trend_h2-check}
grade_code("Un test de tendance avec bootstrap est bien plus intéressant qu'un test classique. Cependant, cette opération prend du temps. C'est pourquoi nous avons limité les rééchantillonnages à 199. En pratique, il vaut mieux en faire, par exemple, 999.")
```

```{r qu_tren}
question("Y a t'il un tendance générale dans cette série ? ",
  answer("Une tendance générale est présente dans cette série. On l'observe grâce à l'histogramme de la distribution de t.", correct = TRUE),
  answer("Il n'y a pas de tendance générale dans cette série. On l'observe grâce à l'histogramme de la distribution de t."),
  answer("Une tendance générale est présente dans cette série. On l'observe grâce au graphique quantile-quantile l'histogramme de la distribution de t*."),
  answer("Il n'y a pas de tendance générale dans cette série. On l'observe grâce au graphique quantile-quantile l'histogramme de la distribution de t*."),
  allow_retry = TRUE,
  random_answer_order = TRUE
)
```

Calculez des statistiques glissantes afin de délimiter les périodes de 0 à 5, 5 à 15, 15 à 25 et de 25 à 36. Réalisez un graphique des statistiques glissantes en y ajoutant les médianes pour chaque période. Ajoutez la légende en position c(1,182). Renommez l'axe X en "Temps [min]", l'axe Y en "Fréquence cardiaque [bpm]" et le titre en "Statistiques glissantes".

```{r sl_h2, exercise = TRUE}
sl <- stat.slide(___(___), ___, xcut = c(___, ___, ___, ___, ___))
# Graphique de l'objet `sl`
plot(__, stat = ___, leg = ___, lpos = c(___, ___),
  xlab = ___, ylab = ____,
  main = ___)
```

```{r sl_h2-hint-1}
sl <- stat.slide(___(___), ___, xcut = c(0, 5, 15, 25, 36))
# Graphique de l'objet `sl`
plot(sl, stat = ___, leg = TRUE, lpos = c(1, 182),
  xlab = ___, ylab = ____,
  main = ___)

## Attention, le prochain indice est la solution ##
```

```{r sl_h2-solution}
## Solution ##
sl <- stat.slide(time(hr_filtered), hr_filtered, xcut = c(0, 5, 15, 25, 36))
# Graphique de l'objet `sl`
plot(sl, stat = "median", leg = TRUE, lpos = c(1, 182),
  xlab = "Temps [min]", ylab = "Fréquence cardiaque [bpm]",
  main = "Statistiques glissantes")
```

```{r sl_h2-check}
grade_code("Ce graphique est très explicite et va permettre au médécin d'expliquer au sportif l'évolution de sa fréquence cardiaque au cours du temps.")
```

Grâce à votre analyse, le médecin peut confirmer ses premières observations. Les cinq premières minutes, la fréquence cardiaque augmente rapidement pour atteindre un plateau entre la minute 5 et la minute 15 d'une valeur médiane de 174 bpm. Une seconde augmentation plus progressive est observable entre la minute 15 et la minute 25. Enfin un nouveau plateau est observé entre la minute 25 et la fin de la course.

Le médecin émet l'hypothèse suivante. Le sportif atteint le premier plateau puis on observe une probable dérive cardiaque. La dérive cardiaque est liée à l'augmentation de la température corporelle. Le corps tente de dissiper la chaleur en dilatant les vaisseaux sanguins. Afin de maintenir le débit cardiaque constant, la fréquence cardiaque va augmenter. Le dernier plateau est probablement lié à la diminution de la vitesse de course (observée par ailleurs à l'aide d'un autre capteur) qui va contrer l'augmentation de la vitesse cardiaque.

## Conclusion

Vous venez d'appliquer vos connaissances sur le filtrage d'une série pour étudier une série temporelle de la variation cardiaque d'un sportif sur une course de 10km.

```{r comm_noscore, echo=FALSE}
question_text(
  "Laissez-nous vos impressions sur ce learnr",
  answer("", TRUE, message = "Pas de commentaires... C'est bien aussi."),
  incorrect = "Vos commentaires sont enregistrés.",
  placeholder = "Entrez vos commentaires ici...",
  allow_retry = TRUE
)
```

```{css, echo=FALSE}
@media print {
  .topics {
    width: 100% !important;
    padding: 0 0.5em 0 !important;
  }
  .topicsContainer, .topicsContainer *, .learnrBanner, .learnrBanner *, .topicActions, .topicActions * {
    display: none !important;
  }
}
```
